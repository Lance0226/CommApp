// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Test.pb.h"

@implementation TestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface player_info ()
@property (retain) NSString* name;
@property int32_t id;
@property (retain) NSString* email;
@end

@implementation player_info

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (void) dealloc {
  self.name = nil;
  self.email = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0;
    self.email = @"";
  }
  return self;
}
static player_info* defaultplayer_infoInstance = nil;
+ (void) initialize {
  if (self == [player_info class]) {
    defaultplayer_infoInstance = [[player_info alloc] init];
  }
}
+ (player_info*) defaultInstance {
  return defaultplayer_infoInstance;
}
- (player_info*) defaultInstance {
  return defaultplayer_infoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeInt32:2 value:self.id];
  }
  if (self.hasEmail) {
    [output writeString:3 value:self.email];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size += computeInt32Size(2, self.id);
  }
  if (self.hasEmail) {
    size += computeStringSize(3, self.email);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (player_info*) parseFromData:(NSData*) data {
  return (player_info*)[[[player_info builder] mergeFromData:data] build];
}
+ (player_info*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (player_info*) parseFromInputStream:(NSInputStream*) input {
  return (player_info*)[[[player_info builder] mergeFromInputStream:input] build];
}
+ (player_info*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_info*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (player_info*)[[[player_info builder] mergeFromCodedInputStream:input] build];
}
+ (player_info*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_info_Builder*) builder {
  return [[[player_info_Builder alloc] init] autorelease];
}
+ (player_info_Builder*) builderWithPrototype:(player_info*) prototype {
  return [[player_info builder] mergeFrom:prototype];
}
- (player_info_Builder*) builder {
  return [player_info builder];
}
@end

@interface player_info_Builder()
@property (retain) player_info* result;
@end

@implementation player_info_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[player_info alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (player_info_Builder*) clear {
  self.result = [[[player_info alloc] init] autorelease];
  return self;
}
- (player_info_Builder*) clone {
  return [player_info builderWithPrototype:result];
}
- (player_info*) defaultInstance {
  return [player_info defaultInstance];
}
- (player_info*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (player_info*) buildPartial {
  player_info* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (player_info_Builder*) mergeFrom:(player_info*) other {
  if (other == [player_info defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (player_info_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (player_info_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readInt32]];
        break;
      }
      case 26: {
        [self setEmail:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (player_info_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (player_info_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (player_info_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (player_info_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (player_info_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (player_info_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
@end

@interface player_transform ()
@property (retain) NSString* name;
@property int32_t posX;
@property int32_t posY;
@property int32_t posZ;
@property int32_t rotX;
@property int32_t rotY;
@property int32_t rotZ;
@end

@implementation player_transform

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasPosX {
  return !!hasPosX_;
}
- (void) setHasPosX:(BOOL) value {
  hasPosX_ = !!value;
}
@synthesize posX;
- (BOOL) hasPosY {
  return !!hasPosY_;
}
- (void) setHasPosY:(BOOL) value {
  hasPosY_ = !!value;
}
@synthesize posY;
- (BOOL) hasPosZ {
  return !!hasPosZ_;
}
- (void) setHasPosZ:(BOOL) value {
  hasPosZ_ = !!value;
}
@synthesize posZ;
- (BOOL) hasRotX {
  return !!hasRotX_;
}
- (void) setHasRotX:(BOOL) value {
  hasRotX_ = !!value;
}
@synthesize rotX;
- (BOOL) hasRotY {
  return !!hasRotY_;
}
- (void) setHasRotY:(BOOL) value {
  hasRotY_ = !!value;
}
@synthesize rotY;
- (BOOL) hasRotZ {
  return !!hasRotZ_;
}
- (void) setHasRotZ:(BOOL) value {
  hasRotZ_ = !!value;
}
@synthesize rotZ;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.posX = 0;
    self.posY = 0;
    self.posZ = 0;
    self.rotX = 0;
    self.rotY = 0;
    self.rotZ = 0;
  }
  return self;
}
static player_transform* defaultplayer_transformInstance = nil;
+ (void) initialize {
  if (self == [player_transform class]) {
    defaultplayer_transformInstance = [[player_transform alloc] init];
  }
}
+ (player_transform*) defaultInstance {
  return defaultplayer_transformInstance;
}
- (player_transform*) defaultInstance {
  return defaultplayer_transformInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasPosX) {
    return NO;
  }
  if (!self.hasPosY) {
    return NO;
  }
  if (!self.hasPosZ) {
    return NO;
  }
  if (!self.hasRotX) {
    return NO;
  }
  if (!self.hasRotY) {
    return NO;
  }
  if (!self.hasRotZ) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasPosX) {
    [output writeInt32:2 value:self.posX];
  }
  if (self.hasPosY) {
    [output writeInt32:3 value:self.posY];
  }
  if (self.hasPosZ) {
    [output writeInt32:4 value:self.posZ];
  }
  if (self.hasRotX) {
    [output writeInt32:5 value:self.rotX];
  }
  if (self.hasRotY) {
    [output writeInt32:6 value:self.rotY];
  }
  if (self.hasRotZ) {
    [output writeInt32:7 value:self.rotZ];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasPosX) {
    size += computeInt32Size(2, self.posX);
  }
  if (self.hasPosY) {
    size += computeInt32Size(3, self.posY);
  }
  if (self.hasPosZ) {
    size += computeInt32Size(4, self.posZ);
  }
  if (self.hasRotX) {
    size += computeInt32Size(5, self.rotX);
  }
  if (self.hasRotY) {
    size += computeInt32Size(6, self.rotY);
  }
  if (self.hasRotZ) {
    size += computeInt32Size(7, self.rotZ);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (player_transform*) parseFromData:(NSData*) data {
  return (player_transform*)[[[player_transform builder] mergeFromData:data] build];
}
+ (player_transform*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_transform*)[[[player_transform builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (player_transform*) parseFromInputStream:(NSInputStream*) input {
  return (player_transform*)[[[player_transform builder] mergeFromInputStream:input] build];
}
+ (player_transform*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_transform*)[[[player_transform builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_transform*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (player_transform*)[[[player_transform builder] mergeFromCodedInputStream:input] build];
}
+ (player_transform*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_transform*)[[[player_transform builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_transform_Builder*) builder {
  return [[[player_transform_Builder alloc] init] autorelease];
}
+ (player_transform_Builder*) builderWithPrototype:(player_transform*) prototype {
  return [[player_transform builder] mergeFrom:prototype];
}
- (player_transform_Builder*) builder {
  return [player_transform builder];
}
@end

@interface player_transform_Builder()
@property (retain) player_transform* result;
@end

@implementation player_transform_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[player_transform alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (player_transform_Builder*) clear {
  self.result = [[[player_transform alloc] init] autorelease];
  return self;
}
- (player_transform_Builder*) clone {
  return [player_transform builderWithPrototype:result];
}
- (player_transform*) defaultInstance {
  return [player_transform defaultInstance];
}
- (player_transform*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (player_transform*) buildPartial {
  player_transform* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (player_transform_Builder*) mergeFrom:(player_transform*) other {
  if (other == [player_transform defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasPosX) {
    [self setPosX:other.posX];
  }
  if (other.hasPosY) {
    [self setPosY:other.posY];
  }
  if (other.hasPosZ) {
    [self setPosZ:other.posZ];
  }
  if (other.hasRotX) {
    [self setRotX:other.rotX];
  }
  if (other.hasRotY) {
    [self setRotY:other.rotY];
  }
  if (other.hasRotZ) {
    [self setRotZ:other.rotZ];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (player_transform_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (player_transform_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setPosX:[input readInt32]];
        break;
      }
      case 24: {
        [self setPosY:[input readInt32]];
        break;
      }
      case 32: {
        [self setPosZ:[input readInt32]];
        break;
      }
      case 40: {
        [self setRotX:[input readInt32]];
        break;
      }
      case 48: {
        [self setRotY:[input readInt32]];
        break;
      }
      case 56: {
        [self setRotZ:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (player_transform_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (player_transform_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasPosX {
  return result.hasPosX;
}
- (int32_t) posX {
  return result.posX;
}
- (player_transform_Builder*) setPosX:(int32_t) value {
  result.hasPosX = YES;
  result.posX = value;
  return self;
}
- (player_transform_Builder*) clearPosX {
  result.hasPosX = NO;
  result.posX = 0;
  return self;
}
- (BOOL) hasPosY {
  return result.hasPosY;
}
- (int32_t) posY {
  return result.posY;
}
- (player_transform_Builder*) setPosY:(int32_t) value {
  result.hasPosY = YES;
  result.posY = value;
  return self;
}
- (player_transform_Builder*) clearPosY {
  result.hasPosY = NO;
  result.posY = 0;
  return self;
}
- (BOOL) hasPosZ {
  return result.hasPosZ;
}
- (int32_t) posZ {
  return result.posZ;
}
- (player_transform_Builder*) setPosZ:(int32_t) value {
  result.hasPosZ = YES;
  result.posZ = value;
  return self;
}
- (player_transform_Builder*) clearPosZ {
  result.hasPosZ = NO;
  result.posZ = 0;
  return self;
}
- (BOOL) hasRotX {
  return result.hasRotX;
}
- (int32_t) rotX {
  return result.rotX;
}
- (player_transform_Builder*) setRotX:(int32_t) value {
  result.hasRotX = YES;
  result.rotX = value;
  return self;
}
- (player_transform_Builder*) clearRotX {
  result.hasRotX = NO;
  result.rotX = 0;
  return self;
}
- (BOOL) hasRotY {
  return result.hasRotY;
}
- (int32_t) rotY {
  return result.rotY;
}
- (player_transform_Builder*) setRotY:(int32_t) value {
  result.hasRotY = YES;
  result.rotY = value;
  return self;
}
- (player_transform_Builder*) clearRotY {
  result.hasRotY = NO;
  result.rotY = 0;
  return self;
}
- (BOOL) hasRotZ {
  return result.hasRotZ;
}
- (int32_t) rotZ {
  return result.rotZ;
}
- (player_transform_Builder*) setRotZ:(int32_t) value {
  result.hasRotZ = YES;
  result.rotZ = value;
  return self;
}
- (player_transform_Builder*) clearRotZ {
  result.hasRotZ = NO;
  result.rotZ = 0;
  return self;
}
@end

